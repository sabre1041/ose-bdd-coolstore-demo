node {
    
    def WORKSPACE = pwd()
    def mvnHome = tool 'maven'
   
   stage 'Checkout'

       checkout scm

   stage 'Maven Build'
   
        try {
            sh "cd projects/brms-coolstore-demo && ${mvnHome}/bin/mvn -Dmaven.test.failure.ignore clean install"
   
            step([$class: 'ArtifactArchiver', artifacts: '**/target/*.war', fingerprint: true])
        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }

    stage 'OpenShift Build'
      
        try {
            // Download support scripts
            sh "mkdir -p ${WORKSPACE}/build-tools && curl -s -o ${WORKSPACE}/build-tools/ose-build-monitor.sh https://raw.githubusercontent.com/sabre1041/ose3-samples/master/trigger-monitor-build.sh && chmod +x ${WORKSPACE}/build-tools/ose-build-monitor.sh && curl -s -o ${WORKSPACE}/build-tools/ose-deploy-monitor.sh https://raw.githubusercontent.com/sabre1041/ose3-samples/master/verify-deploy.sh && chmod +x ${WORKSPACE}/build-tools/ose-deploy-monitor.sh"
   
            withCredentials([[$class: 'StringBinding',
                credentialsId: 'bdd-ose-token', variable: 'OSE_TOKEN']]) {
                
                    sh """
                
                        ${WORKSPACE}/build-tools/ose-build-monitor.sh -h=${OPENSHIFT_HOST} -t=${env.OSE_TOKEN} -n=${OPENSHIFT_SOURCE_PROJECT} -a=${OPENSHIFT_SOURCE_APPLICATION}
                   
                        ${WORKSPACE}/build-tools/ose-deploy-monitor.sh -h=${OPENSHIFT_HOST} -t=${env.OSE_TOKEN} -n=${OPENSHIFT_SOURCE_PROJECT} -a=${OPENSHIFT_SOURCE_APPLICATION}

                    """
                
            }
        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }          
    
        
    stage "Deploy to Production"
   
        input "Deploy Application to Production?"
 
        try {    
        
            sh "echo Deploying to Production"
        
            withCredentials([[$class: 'StringBinding',
                credentialsId: 'bdd-ose-token', variable: 'OSE_TOKEN']]) {
            
                // Download support scripts
                sh """
            
                    curl -s -o ${WORKSPACE}/build-tools/is-tag.sh https://raw.githubusercontent.com/sabre1041/ose3-samples/master/is-tag.sh && chmod +x ${WORKSPACE}/build-tools/is-tag.sh
            
                    ${WORKSPACE}/build-tools/is-tag.sh -h=${OPENSHIFT_HOST} -t=${env.OSE_TOKEN} -sn=${OPENSHIFT_SOURCE_PROJECT} -sa=${OPENSHIFT_SOURCE_APPLICATION} -dn=${OPENSHIFT_DESTINATION_PROJECT} -da=${OPENSHIFT_DESTINATION_APPLICATION}
    
                    sleep 5s 
             
                    ${WORKSPACE}/build-tools/ose-deploy-monitor.sh -h=${OPENSHIFT_HOST} -t=${env.OSE_TOKEN} -n=${OPENSHIFT_DESTINATION_PROJECT} -a=${OPENSHIFT_DESTINATION_APPLICATION}
            
                """
            }
        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }        
}

def processStageResult() {
//    step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: "${EMAIL}", sendToIndividuals: false])

    if (currentBuild.result != null) {
        sh "exit 1"
    }
}
